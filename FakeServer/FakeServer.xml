<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FakeServer</name>
    </assembly>
    <members>
        <member name="M:FakeServer.Common.ObjectHelper.GetPropertyAndCompare(System.Dynamic.ExpandoObject,System.String,System.String,System.Func{System.Object,System.Object,System.Boolean})">
            <summary>
            Find property from ExpandoObject and compare it to provided value
            </summary>
            <param name="current"></param>
            <param name="propertyName"></param>
            <param name="valueToCompare"></param>
            <param name="compareFunc"></param>
            <returns>True is object matches valueToCompare</returns>
        </member>
        <member name="M:FakeServer.Common.ObjectHelper.GetNestedProperty(System.Dynamic.ExpandoObject,System.String,System.String)">
             <summary>
             Find property from ExpandoObject
            
             Split nested properties with backslash, e.g. child/grandchild/grandgrandchild
            
             If path contains integers, those are used as id field comparisons
             </summary>
             <param name="current"></param>
             <param name="propertyName"></param>
             <param name="idFieldName"></param>
             <returns>Dynamic is return value can be a single item or a list</returns>
        </member>
        <member name="M:FakeServer.Common.ObjectHelper.CompareFieldValueWithId(System.Object,System.String,System.Object)">
            <summary>
            Compare the field value from a source object to the provided id.
            </summary>
            <remarks>
            If the field value is a string, it is also compared to the string representation of the provided id.
            </remarks>
            <param name="source"></param>
            <param name="fieldName"></param>
            <param name="id"></param>
            <returns>The field value from is equal to the provided id</returns>
        </member>
        <member name="M:FakeServer.Common.ObjectHelper.GetValueAsCorrectType(System.String)">
            <summary>
            Convert a value to correct type
            </summary>
            <param name="value">the input value</param>
            <returns>value as a boolean, an integer, a double, a DateTime or as a string</returns>
        </member>
        <member name="M:FakeServer.Common.ObjectHelper.GetIdAsCorrectType(System.String)">
            <summary>
            Convert the value of an identifier from JSON to correct type.
            </summary>
            <param name="id">the input id</param>
            <returns>value as a boolean, an integer, a double or as a string</returns>
        </member>
        <member name="M:FakeServer.Common.ObjectHelper.TryToCastValue(System.Object)">
            <summary>
            Try to cast value from JSON file to correct type.
            Now only type to handle is DateTime
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FakeServer.Controllers.AsyncController.AddNewItem(System.String,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Add new item
            </summary>
            <param name="collectionId">Collection id</param>
            <param name="item">Item to add</param>
            <returns></returns>
            <response code="202">New async operation started</response>
        </member>
        <member name="M:FakeServer.Controllers.AsyncController.ReplaceItem(System.String,System.Object,System.Object)">
            <summary>
            Replace item from collection
            </summary>
            <param name="collectionId">Collection id</param>
            <param name="id">Id of the item to be replaced</param>
            <param name="item">Item's new content</param>
            <returns></returns>
            <response code="202">New async operation started</response>
        </member>
        <member name="M:FakeServer.Controllers.AsyncController.UpdateItem(System.String,System.Object,Newtonsoft.Json.Linq.JToken)">
             <summary>
             Update item's content
             </summary>
             <remarks>
             Patch data contains fields to be updated.
            
                 {
                    "stringField": "some value",
                    "intField": 22,
                    "boolField": true
                 }
             </remarks>
             <param name="collectionId"></param>
             <param name="id">Id of the item to be updated</param>
             <param name="patchData">Patch data</param>
             <returns></returns>
             <response code="202">New async operation started</response>
             <response code="415">Unsupported content type</response>
        </member>
        <member name="M:FakeServer.Controllers.AsyncController.DeleteItem(System.String,System.Object)">
            <summary>
            Remove item from collection
            </summary>
            <param name="collectionId">Collection id</param>
            <param name="id">Id of the item to be removed</param>
            <returns></returns>
            <response code="202">New async operation started</response>
        </member>
        <member name="M:FakeServer.Controllers.AsyncController.GetQueueItem(System.String)">
            <summary>
            Get the job status
            </summary>
            <param name="queueId">Job's queue Id</param>
            <returns></returns>
            <response code="200">Job is not completed</response>
            <response code="303">Job is completed</response>
            <response code="404">Item not found</response>
        </member>
        <member name="M:FakeServer.Controllers.AsyncController.DeleteQueueItem(System.String)">
            <summary>
            Delete the job item from the queue
            </summary>
            <param name="queueId">Job's queue Id</param>
            <returns></returns>
            <response code="204">Item found and deleted</response>
            <response code="404">Item not found</response>
        </member>
        <member name="M:FakeServer.Controllers.DynamicController.GetKeys">
            <summary>
            List keys
            </summary>
            <returns>List of keys</returns>
        </member>
        <member name="M:FakeServer.Controllers.DynamicController.UpdateAllData(System.String)">
            <summary>
            Replace database.json content
            </summary>
            <param name="value">New JSON content</param>
        </member>
        <member name="M:FakeServer.Controllers.DynamicController.GetItems(System.String,System.Int32,System.Int32)">
             <summary>
             Get items
             </summary>
             <remarks>
             Add filtering with query parameters. E.q. /api/users?age=22&amp;name=Phil (not possible with Swagger)
            
             Optional parameter names skip/take and offset/limit and page/per_page:
             /api/users?skip=10&amp;take=20
             /api/users?offset=10&amp;limit=20
             /api/users?page=2&amp;per_page=20
              </remarks>
             <param name="collectionId">Collection id</param>
             <param name="skip">Items to skip (optional name offset)</param>
             <param name="take">Items to take (optional name limit)</param>
             <returns>List of items</returns>
             <response code="200">Collection item array</response>
             <response code="400">Invalid query parameters</response>
             <response code="404">Collection not found</response>
        </member>
        <member name="M:FakeServer.Controllers.DynamicController.GetItem(System.String,System.Object)">
            <summary>
            Get single item
            </summary>
            <param name="collectionId">Collection id</param>
            <param name="id">Item id</param>
            <returns>Item</returns>
            <response code="200">Item found</response>
            <response code="400">Item is not collection</response>
            <response code="404">Item not found</response>
        </member>
        <member name="M:FakeServer.Controllers.DynamicController.GetNested(System.String,System.Object,System.String)">
            <summary>
            Get nested item
            </summary>
            <remarks>
            Add full path separated with periods. E.q. /api/users/1/parents/0/work
            </remarks>
            <param name="collectionId">Collection id</param>
            <param name="id">Item id</param>
            <param name="path">Rest of the path</param>
            <returns></returns>
            <response code="200">Nested item found</response>
            <response code="400">Parent item not found or item not collection</response>
            <response code="404">Nested item not found</response>
        </member>
        <member name="M:FakeServer.Controllers.DynamicController.AddNewItem(System.String,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Add new item
            </summary>
            <param name="collectionId">Collection id</param>
            <param name="item">Item to add</param>
            <returns>Created item id</returns>
            <response code="201">Item created</response>
            <response code="400">Item is null</response>
            <response code="409">Collection is an object</response>
        </member>
        <member name="M:FakeServer.Controllers.DynamicController.ReplaceItem(System.String,System.Object,System.Object)">
            <summary>
            Replace item from collection
            </summary>
            <param name="collectionId">Collection id</param>
            <param name="id">Id of the item to be replaced</param>
            <param name="item">Item's new content</param>
            <returns></returns>
            <response code="204">Item found and replaced</response>
            <response code="400">Replace data is null or item is not in a collection</response>
            <response code="404">Item not found</response>
        </member>
        <member name="M:FakeServer.Controllers.DynamicController.UpdateItem(System.String,System.Object,Newtonsoft.Json.Linq.JToken)">
             <summary>
             Update item's content
             </summary>
             <remarks>
             Patch data contains fields to be updated.
            
                 {
                    "stringField": "some value",
                    "intField": 22,
                    "boolField": true
                 }
             </remarks>
             <param name="collectionId">Collection id</param>
             <param name="id">Id of the item to be updated</param>
             <param name="patchData">Patch data</param>
             <returns></returns>
             <response code="204">Item found and updated</response>
             <response code="400">Patch data is empty or item is not in a collection</response>
             <response code="404">Item not found</response>
             <response code="415">Unsupported content type</response>
        </member>
        <member name="M:FakeServer.Controllers.DynamicController.UpdateNestedItem(System.String,System.Object,System.String,Newtonsoft.Json.Linq.JToken)">
             <summary>
             Update Nested item's content
             </summary>
             <remarks>
             Patch data contains fields to be updated.
            
                 {
                    "stringField": "some value",
                    "intField": 22,
                    "boolField": true
                 }
             </remarks>
             <param name="collectionId">Collection id</param>
             <param name="id">Id of the item to be updated</param>
             <param name="path">Rest of the path</param>
             <param name="patchData">Patch data</param>
             <returns></returns>
             <response code="204">Item found and updated</response>
             <response code="400">Patch data is empty or item is not in a collection</response>
             <response code="404">Item not found</response>
             <response code="415">Unsupported content type</response>
        </member>
        <member name="M:FakeServer.Controllers.DynamicController.DeleteItem(System.String,System.Object)">
            <summary>
            Remove item from collection
            </summary>
            <param name="collectionId">Collection id</param>
            <param name="id">Id of the item to be removed</param>
            <returns></returns>
            <response code="204">Item found and removed</response>
            <response code="400">Item is not in a collection</response>
            <response code="404">Item not found</response>
        </member>
        <member name="M:FakeServer.Controllers.DynamicController.ReplaceSingleItem(System.String,System.Object)">
            <summary>
            Replace object
            </summary>
            <param name="objectId">Object id</param>
            <param name="item">Object's new content</param>
            <returns></returns>
            <response code="204">Object found and replaced</response>
            <response code="400">Replace data is null or item is in a collection</response>
            <response code="404">Object not found</response>
        </member>
        <member name="M:FakeServer.Controllers.DynamicController.UpdateSingleItem(System.String,Newtonsoft.Json.Linq.JToken)">
             <summary>
             Update single object's content
             </summary>
             <remarks>
             Patch data contains fields to be updated.
            
                 {
                    "stringField": "some value",
                    "intField": 22,
                    "boolField": true
                 }
             </remarks>
             <param name="objectId">Object id</param>
             <param name="patchData">Patch data</param>
             <returns></returns>
             <response code="204">Object found and updated</response>
             <response code="400">Patch data is empty</response>
             <response code="404">Object not found</response>
             <response code="415">Unsupported content type</response>
        </member>
        <member name="M:FakeServer.Controllers.DynamicController.DeleteSingleItem(System.String)">
            <summary>
            Remove single object
            </summary>
            <param name="objectId">Single object id</param>
            <returns></returns>
            <response code="204">Object found and removed</response>
            <response code="400">Object is a collection</response>
            <response code="404">Object not found</response>
        </member>
    </members>
</doc>
